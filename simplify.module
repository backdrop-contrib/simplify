<?php
/**
 * @file
 * Simplifies the user interface by hiding particular fields.
 */

/**
 * Implements hook_permission().
 */
function simplify_permission() {
  return array(
    'administer simplify' => array(
      'title' => t('Administer simplify'),
    ),
    'view hidden fields' => array(
      'title' => t('View hidden fields'),
    ),
  );
}

/**
 * Implements hook_config_info().
 */
function simplify_config_info() {
  $prefixes['simplify.global'] = array(
    'label' => t('Global fields'),
    'group' => t('Simplify'),
  );
  $prefixes['simplify.nodes'] = array(
    'label' => t('Node fields'),
    'group' => t('Simplify'),
  );
  $prefixes['simplify.comments'] = array(
    'label' => t('Comment fields'),
    'group' => t('Simplify'),
  );
  $prefixes['simplify.taxonomy'] = array(
    'label' => t('Taxonomy fields'),
    'group' => t('Simplify'),
  );

  return $prefixes;
}

/**
 * Implements hook_menu().
 */
function simplify_menu() {
  $items['admin/config/user-interface/simplify'] = array(
    'title' => 'Simplify',
    'description' => 'Configure hidden fields globally.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('simplify_global_configuration_form'),
    'access arguments' => array('administer simplify'),
    'file' => 'simplify.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter() for node_type_form.
 */
function simplify_form_node_type_form_alter(&$form, &$form_state, $form_id) {
  $type = $form['#node_type'];
  // Check to see if type is new so don't try to load config for node type
  // settings or node type comment settings.
  $type_is_new = property_exists($type, 'is_new');

  // Nodes.
  $form['simplify'] = array(
    '#type' => 'fieldset',
    '#title' => t('Simplify'),
    '#description' => t('These fields will be hidden from <em>@type</em> node forms. Disabled checkboxes indicate fields that have been hidden <a href="@global">globally</a>.', array(
      '@type' => $type->name,
      '@global' => url('admin/config/user-interface/simplify'),
    )),
    '#access' => user_access('administer simplify'),
    '#group' => 'additional_settings',
  );
  $form['simplify']['nodes'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Hide:'),
    '#options' => simplify_get_fields('nodes'),
    '#default_value' => !$type_is_new ? array_filter(config_get('simplify.nodes', $type->type)) : array(),
    '#after_build' => array('simplify_disable_globally_hidden_checkboxes'),
  );

  // Comments.
  if (!empty($form['comment'])) {
    $form['comment']['simplify'] = array(
      '#type' => 'fieldset',
      '#title' => t('Simplify'),
      '#description' => t('These fields will be hidden from <em>@type</em> comment forms. Disabled checkboxes indicate fields that have been hidden <a href="@global">globally</a>.', array(
        '@type' => $type->name,
        '@global' => url('admin/config/user-interface/simplify'),
      )),
      '#access' => user_access('administer simplify'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['comment']['simplify']['comments'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Hide:'),
      '#options' => simplify_get_fields('comments'),
      '#default_value' => !$type_is_new ? array_filter(config_get('simplify.comments', $type->type)) : array(),
      '#after_build' => array('simplify_disable_globally_hidden_checkboxes'),
    );
  }

  // Add custom submit function.
  $form['#submit'][] = 'simplify_form_node_type_form_alter_submit';
}

/**
 * Custom submit function for simplify_form_node_type_form_alter().
 */
function simplify_form_node_type_form_alter_submit($form, &$form_state) {
  $values = $form_state['values'];

  // Nodes.
  config_set('simplify.nodes', $values['type'], $values['nodes']);

  // Comments.
  if (isset($values['comments'])) {
    config_set('simplify.comments', $values['type'], $values['comments']);
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for taxonomy_form_vocabulary.
 */
function simplify_form_taxonomy_form_vocabulary_alter(&$form, &$form_state, $form_id) {
  $vocabulary = $form['#vocabulary'];

  // Taxonomy.
  $form['simplify'] = array(
    '#type' => 'fieldset',
    '#title' => t('Simplify'),
    '#description' => t('These fields will be hidden from <em>@vocabulary</em> taxonomy term forms. Disabled checkboxes indicate fields that have been hidden <a href="@global">globally</a>.', array(
      '@vocabulary' => $vocabulary->name,
      '@global' => url('admin/config/user-interface/simplify'),
    )),
    '#access' => user_access('administer simplify'),
    '#group' => 'additional_settings',
  );
  $form['simplify']['taxonomy'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Hide:'),
    '#options' => simplify_get_fields('taxonomy'),
    '#default_value' => !empty($vocabulary->machine_name) ? array_filter(config_get('simplify.taxonomy', $vocabulary->machine_name)) : array(),
    '#after_build' => array('simplify_disable_globally_hidden_checkboxes'),
  );

  // Add custom submit function.
  $form['#submit'][] = 'simplify_form_taxonomy_form_vocabulary_alter_submit';
}

/**
 * Custom submit function for simplify_form_taxonomy_form_vocabulary_alter().
 */
function simplify_form_taxonomy_form_vocabulary_alter_submit($form, &$form_state) {
  $values = $form_state['values'];

  config_set('simplify.taxonomy', $values['machine_name'], $values['taxonomy']);
}

/**
 * Disable checkboxes to indicate fields have been hidden globally.
 */
function simplify_disable_globally_hidden_checkboxes($element, &$form_state) {
  // Get globally hidden fields.
  $global_fields = config_get('simplify.global', $element['#name']);

  // Disable any globally hidden fields.
  foreach (element_children($element) as $field) {
    if (!empty($global_fields[$field])) {
      $element[$field]['#checked'] = TRUE;
      $element[$field]['#attributes']['disabled'] = 'disabled';
    }
  }

  return $element;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node_form.
 */
function simplify_form_node_form_alter(&$form, &$form_state, $form_id) {
  $node = $form['#node'];

  // Get array of fields to hide.
  $global_fields = array_filter(config_get('simplify.global', 'nodes'));
  $type_fields = array_filter(config_get('simplify.nodes', $node->type));
  $fields = array_merge($global_fields, $type_fields);

  // Hide fields.
  simplify_hide_fields($fields, $form);
}

/**
 * Implements hook_form_FORM_ID_alter() for user_profile_form.
 */
function simplify_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  // Get array of fields to hide.
  $fields = array_filter(config_get('simplify.global', 'users'));

  // Hide fields.
  simplify_hide_fields($fields, $form);
}

/**
 * Implements hook_form_FORM_ID_alter() for user_register_form.
 */
function simplify_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  // Same as simplify_form_user_profile_form_alter().
  simplify_form_user_profile_form_alter($form, $form_state, $form_id);
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for comment_form.
 */
function simplify_form_comment_form_alter(&$form, &$form_state, $form_id) {
  $node = $form['#node'];

  // Get array of fields to hide.
  $global_fields = array_filter(config_get('simplify.global', 'comments'));
  $type_fields = array_filter(config_get('simplify.comments', $node->type));
  $fields = array_merge($global_fields, $type_fields);

  // Hide fields.
  simplify_hide_fields($fields, $form);
}

/**
 * Implements hook_form_FORM_ID_alter() for taxonomy_form_term.
 */
function simplify_form_taxonomy_form_term_alter(&$form, &$form_state, $form_id) {
  $vocabulary = $form['#vocabulary'];

  // Get array of fields to hide.
  $global_fields = array_filter(config_get('simplify.global', 'taxonomy'));
  $vocabulary_fields = array_filter(config_get('simplify.taxonomy', $vocabulary->machine_name));
  $fields = array_merge($global_fields, $vocabulary_fields);

  // Hide fields.
  simplify_hide_fields($fields, $form);
}

/**
 * Implements hook_form_FORM_ID_alter() for block_admin_configure.
 */
function simplify_form_block_admin_configure_alter(&$form, &$form_state, $form_id) {
  // Get array of fields to hide.
  $fields = array_filter(config_get('simplify.global', 'blocks'));

  // Hide fields.
  simplify_hide_fields($fields, $form);
}

/**
 * Implements hook_form_FORM_ID_alter() for block_add_block_form.
 */
function simplify_form_block_add_block_form_alter(&$form, &$form_state, $form_id) {
  // Same as simplify_form_block_admin_configure_alter().
  simplify_form_block_admin_configure_alter($form, $form_state, $form_id);
}

/**
 * Hide fields from all users without the 'View hidden fields' permission.
 */
function simplify_hide_fields($fields, &$form) {
  global $user;

  if (!empty($fields) && (!user_access('view hidden fields') || ($user->uid == 1 && config_get('simplify.global', 'user1')))) {
    foreach ($fields as $field) {
      simplify_hide_field($field, $form);
    }
  }
}

/**
 * Hide a given field.
 */
function simplify_hide_field($field, &$form) {
  switch ($field) {

    // Authoring information.
    case 'author':
      $form['author']['#access'] = FALSE;
    break;

    // Book outline.
    case 'book':
      $form['book']['#access'] = FALSE;
    break;

    // Comment settings.
    case 'comment':
      $form['comment_settings']['#access'] = FALSE;
    break;

    // Contact settings.
    case 'contact':
      $form['contact']['#access'] = FALSE;
    break;

    // Description field.
    case 'description':
      $form['description']['#access'] = FALSE;
    break;

    // Formatting options.
    case 'format':
      simplify_hide_text_format_elements($form);
    break;

    // Menu settings.
    case 'menu':
      $form['menu']['#access'] = FALSE;
    break;

    // Meta tags.
    case 'metatag':
      $form['metatags']['#access'] = FALSE;
    break;

    // Publishing options.
    case 'options':
      $form['options']['#access'] = FALSE;
    break;

    // URL settings.
    case 'path':
      $form['path']['#access'] = FALSE;
    break;

    // User picture.
    case 'picture':
      $form['picture']['#access'] = FALSE;
    break;

    // URL redirects.
    case 'redirect':
      $form['redirect']['#access'] = FALSE;
    break;

    // Relations.
    case 'relations':
      $form['relations']['#access'] = FALSE;
    break;

    // Revision information.
    case 'revision':
      $form['revision_information']['#access'] = FALSE;
    break;

    // Signature settings.
    case 'signature':
      $form['signature_settings']['#access'] = FALSE;
    break;

    // Status.
    case 'status':
      $form['account']['status']['#access'] = FALSE;
    break;

    // XML sitemap.
    case 'xmlsitemap':
      $form['xmlsitemap']['#access'] = FALSE;
    break;

  }

  // Allow other modules to alter the way fields are hidden.
  backdrop_alter('simplify_hide_field', $form, $field);
}

/**
 * Recurse through the provided form and hide any text_format elements.
 */
function simplify_hide_text_format_elements(&$form) {
  $searchable_types = array(
    'container',
    'fieldset',
  );

  foreach (element_children($form) as $key) {
    if (!isset($form[$key]['#type'])) {
      simplify_hide_text_format_elements($form[$key]);
    }
    else {
      if ($form[$key]['#type'] == 'text_format') {
        $form[$key]['#after_build'][] = 'simplify_hide_text_format_element';
      }
      elseif (in_array($form[$key]['#type'], $searchable_types)) {
        simplify_hide_text_format_elements($form[$key]);
      }
    }
  }
}

/**
 * Hide a given text_format element.
 */
function simplify_hide_text_format_element($element) {
  if (!empty($element['format'])) {
    // Setting '#access' to FALSE doesn't work here without messing up CKEditor,
    // so we make the formatting options element invisible with CSS instead.
    $element['format']['#attributes']['class'][] = 'element-invisible';
  }

  return $element;
}

/**
 * Get default values for a field type.
 */
function simplify_get_defaults($type, $existing = NULL) {
  // Get fields for this field type.
  $fields = array_keys(simplify_get_fields($type));

  // Create default array.
  $defaults = array_fill_keys($fields, 0);

  if (!empty($existing)) {
    // Get existing values.
    $existing = array_values($existing);

    // Add in existing values.
    foreach ($fields as $field) {
      if (in_array($field, $existing)) {
        $defaults[$field] = $field;
      }
    }
  }

  return $defaults;
}

/**
 * Get an array of fields (by type) that can be hidden.
 */
function simplify_get_fields($type) {
  $fields = array();

  switch ($type) {
    // Nodes.
    case 'nodes':
      // Core fields.
      $fields['author'] = t('Authoring information');
      $fields['format'] = t('Formatting options');
      $fields['options'] = t('Publishing options');
      $fields['revision'] = t('Revision information');
      if (module_exists('book')) {
        $fields['book'] = t('Book outline');
      }
      if (module_exists('comment')) {
        $fields['comment'] = t('Comment settings');
      }
      if (module_exists('menu')) {
        $fields['menu'] = t('Menu settings');
      }
      if (module_exists('path')) {
        $fields['path'] = t('URL settings');
      }
      if (module_exists('redirect')) {
        $fields['redirect'] = t('URL redirects');
      }
      // Contrib fields.
      if (module_exists('metatag')) {
        $fields['metatag'] = t('Meta tags');
      }
      if (module_exists('xmlsitemap_node')) {
        $fields['xmlsitemap'] = t('XML sitemap');
      }
    break;

    // Users.
    case 'users':
      // Core fields.
      $fields['format'] = t('Formatting options');
      $fields['picture'] = t('Picture');
      $fields['signature'] = t('Signature settings');
      $fields['status'] = t('Status (blocked/active)');
      if (module_exists('contact')) {
        $fields['contact'] = t('Contact settings');
      }
      if (module_exists('redirect')) {
        $fields['redirect'] = t('URL redirects');
      }
      // Contrib fields.
      if (module_exists('metatag')) {
        $fields['metatag'] = t('Meta tags');
      }
    break;

    // Comments.
    case 'comments':
      // Core fields.
      $fields['format'] = t('Formatting options');
    break;

    // Taxonomy.
    case 'taxonomy':
      // Core fields.
      $fields['description'] = t('Description');
      $fields['format'] = t('Formatting options');
      $fields['relations'] = t('Relations');
      if (module_exists('path')) {
        $fields['path'] = t('URL settings');
      }
      if (module_exists('redirect')) {
        $fields['redirect'] = t('URL redirects');
      }
      // Contrib fields.
      if (module_exists('metatag')) {
        $fields['metatag'] = t('Meta tags');
      }
      if (module_exists('xmlsitemap_taxonomy')) {
        $fields['xmlsitemap'] = t('XML sitemap');
      }
    break;

    // Blocks.
    case 'blocks':
      // Core fields.
      $fields['format'] = t('Formatting options');
    break;
  }

  // Allow other modules to alter the array of fields that can be hidden.
  backdrop_alter('simplify_get_fields', $fields, $type);

  return $fields;
}
